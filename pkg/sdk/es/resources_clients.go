// Code is generated by go generate. DO NOT EDIT.
package opengovernance

import (
	"context"
	entraid "github.com/opengovern/og-describer-entraid/provider/model"
	essdk "github.com/opengovern/og-util/pkg/opengovernance-es-sdk"
	steampipesdk "github.com/opengovern/og-util/pkg/steampipe"
	"github.com/turbot/steampipe-plugin-sdk/v5/plugin"
	"runtime"
)

type Client struct {
	essdk.Client
}

// ==========================  START: AdUsers =============================

type AdUsers struct {
	ResourceID      string                     `json:"resource_id"`
	PlatformID      string                     `json:"platform_id"`
	Description     entraid.AdUsersDescription `json:"Description"`
	Metadata        entraid.Metadata           `json:"metadata"`
	DescribedBy     string                     `json:"described_by"`
	ResourceType    string                     `json:"resource_type"`
	IntegrationType string                     `json:"integration_type"`
	IntegrationID   string                     `json:"integration_id"`
}

type AdUsersHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  AdUsers       `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type AdUsersHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []AdUsersHit      `json:"hits"`
}

type AdUsersSearchResponse struct {
	PitID string      `json:"pit_id"`
	Hits  AdUsersHits `json:"hits"`
}

type AdUsersPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdUsersPaginator(filters []essdk.BoolFilter, limit *int64) (AdUsersPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_users", filters, limit)
	if err != nil {
		return AdUsersPaginator{}, err
	}

	p := AdUsersPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdUsersPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdUsersPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdUsersPaginator) NextPage(ctx context.Context) ([]AdUsers, error) {
	var response AdUsersSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdUsers
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdUsersFilters = map[string]string{
	"account_enabled":                       "Description.AccountEnabled",
	"created_date_time":                     "Description.CreatedDateTime",
	"display_name":                          "Description.DisplayName",
	"id":                                    "Description.Id",
	"identities":                            "Description.Identities",
	"im_addresses":                          "Description.ImAddresses",
	"job_title":                             "Description.JobTitle",
	"last_sign_in_date_time":                "Description.LastSignInDateTime",
	"mail":                                  "Description.Mail",
	"other_mails":                           "Description.OtherMails",
	"password_policies":                     "Description.PasswordPolicies",
	"platform_account_id":                   "Metadata.SourceID",
	"platform_integration_id":               "IntegrationID",
	"platform_resource_id":                  "ID",
	"sign_in_sessions_valid_from_date_time": "Description.SignInSessionsValidFromDateTime",
	"tenant_id":                             "Description.TenantID",
	"usage_location":                        "Description.UsageLocation",
	"user_principal_name":                   "Description.UserPrincipalName",
	"user_type":                             "Description.UserType",
}

func ListAdUsers(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdUsers")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUsers NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUsers NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUsers GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUsers GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUsers GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdUsersPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdUsersFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUsers NewAdUsersPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdUsers paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdUsersFilters = map[string]string{
	"account_enabled":                       "Description.AccountEnabled",
	"created_date_time":                     "Description.CreatedDateTime",
	"display_name":                          "Description.DisplayName",
	"id":                                    "Description.Id",
	"identities":                            "Description.Identities",
	"im_addresses":                          "Description.ImAddresses",
	"job_title":                             "Description.JobTitle",
	"last_sign_in_date_time":                "Description.LastSignInDateTime",
	"mail":                                  "Description.Mail",
	"other_mails":                           "Description.OtherMails",
	"password_policies":                     "Description.PasswordPolicies",
	"platform_account_id":                   "Metadata.SourceID",
	"platform_integration_id":               "IntegrationID",
	"platform_resource_id":                  "ID",
	"sign_in_sessions_valid_from_date_time": "Description.SignInSessionsValidFromDateTime",
	"tenant_id":                             "Description.TenantID",
	"usage_location":                        "Description.UsageLocation",
	"user_principal_name":                   "Description.UserPrincipalName",
	"user_type":                             "Description.UserType",
}

func GetAdUsers(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdUsers")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdUsersPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdUsersFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdUsers =============================

// ==========================  START: AdGroup =============================

type AdGroup struct {
	ResourceID      string                     `json:"resource_id"`
	PlatformID      string                     `json:"platform_id"`
	Description     entraid.AdGroupDescription `json:"Description"`
	Metadata        entraid.Metadata           `json:"metadata"`
	DescribedBy     string                     `json:"described_by"`
	ResourceType    string                     `json:"resource_type"`
	IntegrationType string                     `json:"integration_type"`
	IntegrationID   string                     `json:"integration_id"`
}

type AdGroupHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  AdGroup       `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type AdGroupHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []AdGroupHit      `json:"hits"`
}

type AdGroupSearchResponse struct {
	PitID string      `json:"pit_id"`
	Hits  AdGroupHits `json:"hits"`
}

type AdGroupPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdGroupPaginator(filters []essdk.BoolFilter, limit *int64) (AdGroupPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_groups", filters, limit)
	if err != nil {
		return AdGroupPaginator{}, err
	}

	p := AdGroupPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdGroupPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdGroupPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdGroupPaginator) NextPage(ctx context.Context) ([]AdGroup, error) {
	var response AdGroupSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdGroup
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdGroupFilters = map[string]string{
	"assigned_labels":                  "Description.AssignedLabels",
	"classification":                   "Description.Classification",
	"created_date_time":                "Description.CreatedDateTime",
	"description":                      "Description.Description",
	"display_name":                     "Description.DisplayName",
	"expiration_date_time":             "Description.ExpirationDateTime",
	"group_types":                      "Description.GroupTypes",
	"id":                               "Description.Id",
	"is_assignable_to_role":            "Description.IsAssignableToRole",
	"is_subscribed_by_mail":            "Description.IsAssignableToRole",
	"mail":                             "Description.Mail",
	"mail_enabled":                     "Description.MailEnabled",
	"mail_nickname":                    "Description.MailNickname",
	"member_ids":                       "Description.MemberIDs",
	"membership_rule":                  "Description.MembershipRule",
	"membership_rule_processing_state": "Description.MembershipRuleProcessingState",
	"nested_groups":                    "Description.NestedGroups",
	"on_premises_domain_name":          "Description.OnPremisesDomainName",
	"on_premises_last_sync_date_time":  "Description.OnPremisesLastSyncDateTime",
	"on_premises_net_bios_name":        "Description.OnPremisesNetBiosName",
	"on_premises_sam_account_name":     "Description.OnPremisesSamAccountName",
	"on_premises_security_identifier":  "Description.OnPremisesSecurityIdentifier",
	"on_premises_sync_enabled":         "Description.OnPremisesSyncEnabled",
	"owner_ids":                        "Description.OwnerIDs",
	"platform_account_id":              "Metadata.SourceID",
	"platform_integration_id":          "IntegrationID",
	"platform_resource_id":             "ID",
	"proxy_addresses":                  "Description.ProxyAddresses",
	"renewed_date_time":                "Description.RenewedDateTime",
	"resource_behavior_options":        "Description.ResourceBehaviorOptions",
	"resource_provisioning_options":    "Description.ResourceProvisioningOptions",
	"security_enabled":                 "Description.SecurityEnabled",
	"security_identifier":              "Description.SecurityIdentifier",
	"tenant_id":                        "Description.TenantID",
	"visibility":                       "Description.Visibility",
}

func ListAdGroup(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdGroup")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroup NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroup NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroup GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroup GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroup GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdGroupPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdGroupFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroup NewAdGroupPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdGroup paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdGroupFilters = map[string]string{
	"assigned_labels":                  "Description.AssignedLabels",
	"classification":                   "Description.Classification",
	"created_date_time":                "Description.CreatedDateTime",
	"description":                      "Description.Description",
	"display_name":                     "Description.DisplayName",
	"expiration_date_time":             "Description.ExpirationDateTime",
	"group_types":                      "Description.GroupTypes",
	"id":                               "Description.Id",
	"is_assignable_to_role":            "Description.IsAssignableToRole",
	"is_subscribed_by_mail":            "Description.IsAssignableToRole",
	"mail":                             "Description.Mail",
	"mail_enabled":                     "Description.MailEnabled",
	"mail_nickname":                    "Description.MailNickname",
	"member_ids":                       "Description.MemberIDs",
	"membership_rule":                  "Description.MembershipRule",
	"membership_rule_processing_state": "Description.MembershipRuleProcessingState",
	"nested_groups":                    "Description.NestedGroups",
	"on_premises_domain_name":          "Description.OnPremisesDomainName",
	"on_premises_last_sync_date_time":  "Description.OnPremisesLastSyncDateTime",
	"on_premises_net_bios_name":        "Description.OnPremisesNetBiosName",
	"on_premises_sam_account_name":     "Description.OnPremisesSamAccountName",
	"on_premises_security_identifier":  "Description.OnPremisesSecurityIdentifier",
	"on_premises_sync_enabled":         "Description.OnPremisesSyncEnabled",
	"owner_ids":                        "Description.OwnerIDs",
	"platform_account_id":              "Metadata.SourceID",
	"platform_integration_id":          "IntegrationID",
	"platform_resource_id":             "ID",
	"proxy_addresses":                  "Description.ProxyAddresses",
	"renewed_date_time":                "Description.RenewedDateTime",
	"resource_behavior_options":        "Description.ResourceBehaviorOptions",
	"resource_provisioning_options":    "Description.ResourceProvisioningOptions",
	"security_enabled":                 "Description.SecurityEnabled",
	"security_identifier":              "Description.SecurityIdentifier",
	"tenant_id":                        "Description.TenantID",
	"visibility":                       "Description.Visibility",
}

func GetAdGroup(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdGroup")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdGroupPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdGroupFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdGroup =============================

// ==========================  START: AdServicePrincipal =============================

type AdServicePrincipal struct {
	ResourceID      string                                `json:"resource_id"`
	PlatformID      string                                `json:"platform_id"`
	Description     entraid.AdServicePrincipalDescription `json:"Description"`
	Metadata        entraid.Metadata                      `json:"metadata"`
	DescribedBy     string                                `json:"described_by"`
	ResourceType    string                                `json:"resource_type"`
	IntegrationType string                                `json:"integration_type"`
	IntegrationID   string                                `json:"integration_id"`
}

type AdServicePrincipalHit struct {
	ID      string             `json:"_id"`
	Score   float64            `json:"_score"`
	Index   string             `json:"_index"`
	Type    string             `json:"_type"`
	Version int64              `json:"_version,omitempty"`
	Source  AdServicePrincipal `json:"_source"`
	Sort    []interface{}      `json:"sort"`
}

type AdServicePrincipalHits struct {
	Total essdk.SearchTotal       `json:"total"`
	Hits  []AdServicePrincipalHit `json:"hits"`
}

type AdServicePrincipalSearchResponse struct {
	PitID string                 `json:"pit_id"`
	Hits  AdServicePrincipalHits `json:"hits"`
}

type AdServicePrincipalPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdServicePrincipalPaginator(filters []essdk.BoolFilter, limit *int64) (AdServicePrincipalPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_serviceprincipals", filters, limit)
	if err != nil {
		return AdServicePrincipalPaginator{}, err
	}

	p := AdServicePrincipalPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdServicePrincipalPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdServicePrincipalPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdServicePrincipalPaginator) NextPage(ctx context.Context) ([]AdServicePrincipal, error) {
	var response AdServicePrincipalSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdServicePrincipal
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdServicePrincipalFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"service_principal_type":       "Description.ServicePrincipalType",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func ListAdServicePrincipal(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdServicePrincipal")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdServicePrincipal NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdServicePrincipal NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdServicePrincipal GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdServicePrincipal GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdServicePrincipal GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdServicePrincipalPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdServicePrincipalFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdServicePrincipal NewAdServicePrincipalPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdServicePrincipal paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdServicePrincipalFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"service_principal_type":       "Description.ServicePrincipalType",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func GetAdServicePrincipal(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdServicePrincipal")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdServicePrincipalPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdServicePrincipalFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdServicePrincipal =============================

// ==========================  START: AdApplication =============================

type AdApplication struct {
	ResourceID      string                           `json:"resource_id"`
	PlatformID      string                           `json:"platform_id"`
	Description     entraid.AdApplicationDescription `json:"Description"`
	Metadata        entraid.Metadata                 `json:"metadata"`
	DescribedBy     string                           `json:"described_by"`
	ResourceType    string                           `json:"resource_type"`
	IntegrationType string                           `json:"integration_type"`
	IntegrationID   string                           `json:"integration_id"`
}

type AdApplicationHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  AdApplication `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type AdApplicationHits struct {
	Total essdk.SearchTotal  `json:"total"`
	Hits  []AdApplicationHit `json:"hits"`
}

type AdApplicationSearchResponse struct {
	PitID string            `json:"pit_id"`
	Hits  AdApplicationHits `json:"hits"`
}

type AdApplicationPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdApplicationPaginator(filters []essdk.BoolFilter, limit *int64) (AdApplicationPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_applications", filters, limit)
	if err != nil {
		return AdApplicationPaginator{}, err
	}

	p := AdApplicationPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdApplicationPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdApplicationPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdApplicationPaginator) NextPage(ctx context.Context) ([]AdApplication, error) {
	var response AdApplicationSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdApplication
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdApplicationFilters = map[string]string{
	"api":                          "Description.Api",
	"app_id":                       "Description.AppId",
	"created_date_time":            "Description.CreatedDateTime",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"identifier_uris":              "Description.IdentifierUris",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"oauth2_require_post_response": "Description.Oauth2RequirePostResponse",
	"owner_ids":                    "Description.OwnerIds",
	"parental_control_settings":    "Description.ParentalControlSettings",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_integration_id":      "IntegrationID",
	"publisher_domain":             "Description.PublisherDomain",
	"sign_in_audience":             "Description.SignInAudience",
	"spa":                          "Description.Spa",
	"tags_src":                     "Description.TagsSrc",
	"tenant_id":                    "Description.TenantID",
	"web":                          "Description.Web",
}

func ListAdApplication(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdApplication")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdApplication NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdApplication NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdApplicationPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdApplicationFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdApplication NewAdApplicationPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdApplication paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdApplicationFilters = map[string]string{
	"api":                          "Description.Api",
	"app_id":                       "Description.AppId",
	"created_date_time":            "Description.CreatedDateTime",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"identifier_uris":              "Description.IdentifierUris",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"oauth2_require_post_response": "Description.Oauth2RequirePostResponse",
	"owner_ids":                    "Description.OwnerIds",
	"parental_control_settings":    "Description.ParentalControlSettings",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_integration_id":      "IntegrationID",
	"publisher_domain":             "Description.PublisherDomain",
	"sign_in_audience":             "Description.SignInAudience",
	"spa":                          "Description.Spa",
	"tags_src":                     "Description.TagsSrc",
	"tenant_id":                    "Description.TenantID",
	"web":                          "Description.Web",
}

func GetAdApplication(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdApplication")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdApplicationPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdApplicationFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdApplication =============================

// ==========================  START: AdDirectoryRole =============================

type AdDirectoryRole struct {
	ResourceID      string                             `json:"resource_id"`
	PlatformID      string                             `json:"platform_id"`
	Description     entraid.AdDirectoryRoleDescription `json:"Description"`
	Metadata        entraid.Metadata                   `json:"metadata"`
	DescribedBy     string                             `json:"described_by"`
	ResourceType    string                             `json:"resource_type"`
	IntegrationType string                             `json:"integration_type"`
	IntegrationID   string                             `json:"integration_id"`
}

type AdDirectoryRoleHit struct {
	ID      string          `json:"_id"`
	Score   float64         `json:"_score"`
	Index   string          `json:"_index"`
	Type    string          `json:"_type"`
	Version int64           `json:"_version,omitempty"`
	Source  AdDirectoryRole `json:"_source"`
	Sort    []interface{}   `json:"sort"`
}

type AdDirectoryRoleHits struct {
	Total essdk.SearchTotal    `json:"total"`
	Hits  []AdDirectoryRoleHit `json:"hits"`
}

type AdDirectoryRoleSearchResponse struct {
	PitID string              `json:"pit_id"`
	Hits  AdDirectoryRoleHits `json:"hits"`
}

type AdDirectoryRolePaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdDirectoryRolePaginator(filters []essdk.BoolFilter, limit *int64) (AdDirectoryRolePaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_directoryroles", filters, limit)
	if err != nil {
		return AdDirectoryRolePaginator{}, err
	}

	p := AdDirectoryRolePaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdDirectoryRolePaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdDirectoryRolePaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdDirectoryRolePaginator) NextPage(ctx context.Context) ([]AdDirectoryRole, error) {
	var response AdDirectoryRoleSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdDirectoryRole
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdDirectoryRoleFilters = map[string]string{
	"description":             "Description.Description",
	"display_name":            "Description.DisplayName",
	"id":                      "Description.Id",
	"member_ids":              "Description.MemberIds",
	"platform_integration_id": "IntegrationID",
	"role_template_id":        "Description.RoleTemplateId",
	"tenant_id":               "Description.TenantID",
}

func ListAdDirectoryRole(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdDirectoryRole")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectoryRole NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectoryRole NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectoryRole GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectoryRole GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectoryRole GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdDirectoryRolePaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdDirectoryRoleFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectoryRole NewAdDirectoryRolePaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdDirectoryRole paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdDirectoryRoleFilters = map[string]string{
	"description":             "Description.Description",
	"display_name":            "Description.DisplayName",
	"id":                      "Description.Id",
	"member_ids":              "Description.MemberIds",
	"platform_integration_id": "IntegrationID",
	"role_template_id":        "Description.RoleTemplateId",
	"tenant_id":               "Description.TenantID",
}

func GetAdDirectoryRole(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdDirectoryRole")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdDirectoryRolePaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdDirectoryRoleFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdDirectoryRole =============================

// ==========================  START: AdDirectorySetting =============================

type AdDirectorySetting struct {
	ResourceID      string                                `json:"resource_id"`
	PlatformID      string                                `json:"platform_id"`
	Description     entraid.AdDirectorySettingDescription `json:"Description"`
	Metadata        entraid.Metadata                      `json:"metadata"`
	DescribedBy     string                                `json:"described_by"`
	ResourceType    string                                `json:"resource_type"`
	IntegrationType string                                `json:"integration_type"`
	IntegrationID   string                                `json:"integration_id"`
}

type AdDirectorySettingHit struct {
	ID      string             `json:"_id"`
	Score   float64            `json:"_score"`
	Index   string             `json:"_index"`
	Type    string             `json:"_type"`
	Version int64              `json:"_version,omitempty"`
	Source  AdDirectorySetting `json:"_source"`
	Sort    []interface{}      `json:"sort"`
}

type AdDirectorySettingHits struct {
	Total essdk.SearchTotal       `json:"total"`
	Hits  []AdDirectorySettingHit `json:"hits"`
}

type AdDirectorySettingSearchResponse struct {
	PitID string                 `json:"pit_id"`
	Hits  AdDirectorySettingHits `json:"hits"`
}

type AdDirectorySettingPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdDirectorySettingPaginator(filters []essdk.BoolFilter, limit *int64) (AdDirectorySettingPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_directorysettings", filters, limit)
	if err != nil {
		return AdDirectorySettingPaginator{}, err
	}

	p := AdDirectorySettingPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdDirectorySettingPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdDirectorySettingPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdDirectorySettingPaginator) NextPage(ctx context.Context) ([]AdDirectorySetting, error) {
	var response AdDirectorySettingSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdDirectorySetting
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdDirectorySettingFilters = map[string]string{
	"display_name":            "Description.DisplayName",
	"id":                      "Description.Id",
	"name":                    "Description.Name",
	"platform_integration_id": "IntegrationID",
	"template_id":             "Description.TemplateId",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.Name",
	"value":                   "Description.Value",
}

func ListAdDirectorySetting(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdDirectorySetting")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectorySetting NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectorySetting NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectorySetting GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectorySetting GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectorySetting GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdDirectorySettingPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdDirectorySettingFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDirectorySetting NewAdDirectorySettingPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdDirectorySetting paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdDirectorySettingFilters = map[string]string{
	"display_name":            "Description.DisplayName",
	"id":                      "Description.Id",
	"name":                    "Description.Name",
	"platform_integration_id": "IntegrationID",
	"template_id":             "Description.TemplateId",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.Name",
	"value":                   "Description.Value",
}

func GetAdDirectorySetting(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdDirectorySetting")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdDirectorySettingPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdDirectorySettingFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdDirectorySetting =============================

// ==========================  START: AdDomain =============================

type AdDomain struct {
	ResourceID      string                      `json:"resource_id"`
	PlatformID      string                      `json:"platform_id"`
	Description     entraid.AdDomainDescription `json:"Description"`
	Metadata        entraid.Metadata            `json:"metadata"`
	DescribedBy     string                      `json:"described_by"`
	ResourceType    string                      `json:"resource_type"`
	IntegrationType string                      `json:"integration_type"`
	IntegrationID   string                      `json:"integration_id"`
}

type AdDomainHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  AdDomain      `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type AdDomainHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []AdDomainHit     `json:"hits"`
}

type AdDomainSearchResponse struct {
	PitID string       `json:"pit_id"`
	Hits  AdDomainHits `json:"hits"`
}

type AdDomainPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdDomainPaginator(filters []essdk.BoolFilter, limit *int64) (AdDomainPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_domains", filters, limit)
	if err != nil {
		return AdDomainPaginator{}, err
	}

	p := AdDomainPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdDomainPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdDomainPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdDomainPaginator) NextPage(ctx context.Context) ([]AdDomain, error) {
	var response AdDomainSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdDomain
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdDomainFilters = map[string]string{
	"authentication_type":     "Description.AuthenticationType",
	"id":                      "Description.Id",
	"is_admin_managed":        "Description.IsAdminManaged",
	"is_default":              "Description.IsDefault",
	"is_initial":              "Description.IsInitial",
	"is_root":                 "Description.IsRoot",
	"is_verified":             "Description.IsVerified",
	"platform_integration_id": "IntegrationID",
	"supported_services":      "Description.SupportedServices",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.Id",
}

func ListAdDomain(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdDomain")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDomain NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDomain NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDomain GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDomain GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDomain GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdDomainPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdDomainFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDomain NewAdDomainPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdDomain paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdDomainFilters = map[string]string{
	"authentication_type":     "Description.AuthenticationType",
	"id":                      "Description.Id",
	"is_admin_managed":        "Description.IsAdminManaged",
	"is_default":              "Description.IsDefault",
	"is_initial":              "Description.IsInitial",
	"is_root":                 "Description.IsRoot",
	"is_verified":             "Description.IsVerified",
	"platform_integration_id": "IntegrationID",
	"supported_services":      "Description.SupportedServices",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.Id",
}

func GetAdDomain(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdDomain")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdDomainPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdDomainFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdDomain =============================

// ==========================  START: AdTenant =============================

type AdTenant struct {
	ResourceID      string                      `json:"resource_id"`
	PlatformID      string                      `json:"platform_id"`
	Description     entraid.AdTenantDescription `json:"Description"`
	Metadata        entraid.Metadata            `json:"metadata"`
	DescribedBy     string                      `json:"described_by"`
	ResourceType    string                      `json:"resource_type"`
	IntegrationType string                      `json:"integration_type"`
	IntegrationID   string                      `json:"integration_id"`
}

type AdTenantHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  AdTenant      `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type AdTenantHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []AdTenantHit     `json:"hits"`
}

type AdTenantSearchResponse struct {
	PitID string       `json:"pit_id"`
	Hits  AdTenantHits `json:"hits"`
}

type AdTenantPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdTenantPaginator(filters []essdk.BoolFilter, limit *int64) (AdTenantPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_tenant", filters, limit)
	if err != nil {
		return AdTenantPaginator{}, err
	}

	p := AdTenantPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdTenantPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdTenantPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdTenantPaginator) NextPage(ctx context.Context) ([]AdTenant, error) {
	var response AdTenantSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdTenant
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdTenantFilters = map[string]string{
	"created_date_time":        "Description.CreatedDateTime",
	"display_name":             "Description.DisplayName",
	"on_premises_sync_enabled": "Description.OnPremisesSyncEnabled",
	"platform_account_id":      "Metadata.SourceID",
	"platform_integration_id":  "IntegrationID",
	"platform_resource_id":     "ID",
	"tenant_id":                "Description.TenantID",
	"tenant_type":              "Description.TenantType",
	"verified_domains":         "Description.VerifiedDomains",
}

func ListAdTenant(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdTenant")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdTenant NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdTenant NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdTenant GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdTenant GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdTenant GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdTenantPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdTenantFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdTenant NewAdTenantPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdTenant paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdTenantFilters = map[string]string{
	"created_date_time":        "Description.CreatedDateTime",
	"display_name":             "Description.DisplayName",
	"on_premises_sync_enabled": "Description.OnPremisesSyncEnabled",
	"platform_account_id":      "Metadata.SourceID",
	"platform_integration_id":  "IntegrationID",
	"platform_resource_id":     "ID",
	"tenant_id":                "Description.TenantID",
	"tenant_type":              "Description.TenantType",
	"verified_domains":         "Description.VerifiedDomains",
}

func GetAdTenant(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdTenant")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdTenantPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdTenantFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdTenant =============================

// ==========================  START: AdIdentityProvider =============================

type AdIdentityProvider struct {
	ResourceID      string                                `json:"resource_id"`
	PlatformID      string                                `json:"platform_id"`
	Description     entraid.AdIdentityProviderDescription `json:"Description"`
	Metadata        entraid.Metadata                      `json:"metadata"`
	DescribedBy     string                                `json:"described_by"`
	ResourceType    string                                `json:"resource_type"`
	IntegrationType string                                `json:"integration_type"`
	IntegrationID   string                                `json:"integration_id"`
}

type AdIdentityProviderHit struct {
	ID      string             `json:"_id"`
	Score   float64            `json:"_score"`
	Index   string             `json:"_index"`
	Type    string             `json:"_type"`
	Version int64              `json:"_version,omitempty"`
	Source  AdIdentityProvider `json:"_source"`
	Sort    []interface{}      `json:"sort"`
}

type AdIdentityProviderHits struct {
	Total essdk.SearchTotal       `json:"total"`
	Hits  []AdIdentityProviderHit `json:"hits"`
}

type AdIdentityProviderSearchResponse struct {
	PitID string                 `json:"pit_id"`
	Hits  AdIdentityProviderHits `json:"hits"`
}

type AdIdentityProviderPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdIdentityProviderPaginator(filters []essdk.BoolFilter, limit *int64) (AdIdentityProviderPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_identityproviders", filters, limit)
	if err != nil {
		return AdIdentityProviderPaginator{}, err
	}

	p := AdIdentityProviderPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdIdentityProviderPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdIdentityProviderPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdIdentityProviderPaginator) NextPage(ctx context.Context) ([]AdIdentityProvider, error) {
	var response AdIdentityProviderSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdIdentityProvider
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdIdentityProviderFilters = map[string]string{
	"client_id":               "Description.ClientId",
	"client_secret":           "Description.ClientSecret",
	"id":                      "Description.Id",
	"name":                    "Description.DisplayName",
	"platform_integration_id": "IntegrationID",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.DisplayName",
	"type":                    "Description.Type",
}

func ListAdIdentityProvider(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdIdentityProvider")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdIdentityProvider NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdIdentityProvider NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdIdentityProvider GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdIdentityProvider GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdIdentityProvider GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdIdentityProviderPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdIdentityProviderFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdIdentityProvider NewAdIdentityProviderPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdIdentityProvider paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdIdentityProviderFilters = map[string]string{
	"client_id":               "Description.ClientId",
	"client_secret":           "Description.ClientSecret",
	"id":                      "Description.Id",
	"name":                    "Description.DisplayName",
	"platform_integration_id": "IntegrationID",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.DisplayName",
	"type":                    "Description.Type",
}

func GetAdIdentityProvider(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdIdentityProvider")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdIdentityProviderPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdIdentityProviderFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdIdentityProvider =============================

// ==========================  START: AdSecurityDefaultsPolicy =============================

type AdSecurityDefaultsPolicy struct {
	ResourceID      string                                      `json:"resource_id"`
	PlatformID      string                                      `json:"platform_id"`
	Description     entraid.AdSecurityDefaultsPolicyDescription `json:"Description"`
	Metadata        entraid.Metadata                            `json:"metadata"`
	DescribedBy     string                                      `json:"described_by"`
	ResourceType    string                                      `json:"resource_type"`
	IntegrationType string                                      `json:"integration_type"`
	IntegrationID   string                                      `json:"integration_id"`
}

type AdSecurityDefaultsPolicyHit struct {
	ID      string                   `json:"_id"`
	Score   float64                  `json:"_score"`
	Index   string                   `json:"_index"`
	Type    string                   `json:"_type"`
	Version int64                    `json:"_version,omitempty"`
	Source  AdSecurityDefaultsPolicy `json:"_source"`
	Sort    []interface{}            `json:"sort"`
}

type AdSecurityDefaultsPolicyHits struct {
	Total essdk.SearchTotal             `json:"total"`
	Hits  []AdSecurityDefaultsPolicyHit `json:"hits"`
}

type AdSecurityDefaultsPolicySearchResponse struct {
	PitID string                       `json:"pit_id"`
	Hits  AdSecurityDefaultsPolicyHits `json:"hits"`
}

type AdSecurityDefaultsPolicyPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdSecurityDefaultsPolicyPaginator(filters []essdk.BoolFilter, limit *int64) (AdSecurityDefaultsPolicyPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_securitydefaultspolicy", filters, limit)
	if err != nil {
		return AdSecurityDefaultsPolicyPaginator{}, err
	}

	p := AdSecurityDefaultsPolicyPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdSecurityDefaultsPolicyPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdSecurityDefaultsPolicyPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdSecurityDefaultsPolicyPaginator) NextPage(ctx context.Context) ([]AdSecurityDefaultsPolicy, error) {
	var response AdSecurityDefaultsPolicySearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdSecurityDefaultsPolicy
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdSecurityDefaultsPolicyFilters = map[string]string{
	"description":             "Description.Description",
	"display_name":            "Description.DisplayName",
	"id":                      "Description.Id",
	"is_enabled":              "Description.IsEnabled",
	"platform_integration_id": "IntegrationID",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.DisplayName",
}

func ListAdSecurityDefaultsPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdSecurityDefaultsPolicy")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdSecurityDefaultsPolicy NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdSecurityDefaultsPolicy NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdSecurityDefaultsPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdSecurityDefaultsPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdSecurityDefaultsPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdSecurityDefaultsPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdSecurityDefaultsPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdSecurityDefaultsPolicy NewAdSecurityDefaultsPolicyPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdSecurityDefaultsPolicy paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdSecurityDefaultsPolicyFilters = map[string]string{
	"description":             "Description.Description",
	"display_name":            "Description.DisplayName",
	"id":                      "Description.Id",
	"is_enabled":              "Description.IsEnabled",
	"platform_integration_id": "IntegrationID",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.DisplayName",
}

func GetAdSecurityDefaultsPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdSecurityDefaultsPolicy")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdSecurityDefaultsPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdSecurityDefaultsPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdSecurityDefaultsPolicy =============================

// ==========================  START: AdAuthorizationPolicy =============================

type AdAuthorizationPolicy struct {
	ResourceID      string                                   `json:"resource_id"`
	PlatformID      string                                   `json:"platform_id"`
	Description     entraid.AdAuthorizationPolicyDescription `json:"Description"`
	Metadata        entraid.Metadata                         `json:"metadata"`
	DescribedBy     string                                   `json:"described_by"`
	ResourceType    string                                   `json:"resource_type"`
	IntegrationType string                                   `json:"integration_type"`
	IntegrationID   string                                   `json:"integration_id"`
}

type AdAuthorizationPolicyHit struct {
	ID      string                `json:"_id"`
	Score   float64               `json:"_score"`
	Index   string                `json:"_index"`
	Type    string                `json:"_type"`
	Version int64                 `json:"_version,omitempty"`
	Source  AdAuthorizationPolicy `json:"_source"`
	Sort    []interface{}         `json:"sort"`
}

type AdAuthorizationPolicyHits struct {
	Total essdk.SearchTotal          `json:"total"`
	Hits  []AdAuthorizationPolicyHit `json:"hits"`
}

type AdAuthorizationPolicySearchResponse struct {
	PitID string                    `json:"pit_id"`
	Hits  AdAuthorizationPolicyHits `json:"hits"`
}

type AdAuthorizationPolicyPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdAuthorizationPolicyPaginator(filters []essdk.BoolFilter, limit *int64) (AdAuthorizationPolicyPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_authorizationpolicy", filters, limit)
	if err != nil {
		return AdAuthorizationPolicyPaginator{}, err
	}

	p := AdAuthorizationPolicyPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdAuthorizationPolicyPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdAuthorizationPolicyPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdAuthorizationPolicyPaginator) NextPage(ctx context.Context) ([]AdAuthorizationPolicy, error) {
	var response AdAuthorizationPolicySearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdAuthorizationPolicy
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdAuthorizationPolicyFilters = map[string]string{
	"allow_invites_from": "Description.AllowInvitesFrom",
	"allowed_email_verified_users_to_join_organization": "Description.AllowedEmailVerifiedUsersToJoinOrganization",
	"allowed_to_sign_up_email_based_subscriptions":      "Description.AllowedToSignIpEmailBasedSubscriptions",
	"allowed_to_use_sspr":                               "Description.AllowedToUseSspr",
	"block_msol_powershell":                             "Description.BlockMsolPowershell",
	"default_user_role_permissions":                     "Description.DefaultUserRolePermissions",
	"description":                                       "Description.Description",
	"display_name":                                      "Description.DisplayName",
	"guest_user_role_id":                                "Description.GuestUserRoleId",
	"id":                                                "Description.Id",
	"platform_integration_id":                           "IntegrationID",
	"tenant_id":                                         "Description.TenantID",
	"title":                                             "Description.DisplayName",
}

func ListAdAuthorizationPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdAuthorizationPolicy")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAuthorizationPolicy NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAuthorizationPolicy NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAuthorizationPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAuthorizationPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAuthorizationPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdAuthorizationPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdAuthorizationPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAuthorizationPolicy NewAdAuthorizationPolicyPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdAuthorizationPolicy paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdAuthorizationPolicyFilters = map[string]string{
	"allow_invites_from": "Description.AllowInvitesFrom",
	"allowed_email_verified_users_to_join_organization": "Description.AllowedEmailVerifiedUsersToJoinOrganization",
	"allowed_to_sign_up_email_based_subscriptions":      "Description.AllowedToSignIpEmailBasedSubscriptions",
	"allowed_to_use_sspr":                               "Description.AllowedToUseSspr",
	"block_msol_powershell":                             "Description.BlockMsolPowershell",
	"default_user_role_permissions":                     "Description.DefaultUserRolePermissions",
	"description":                                       "Description.Description",
	"display_name":                                      "Description.DisplayName",
	"guest_user_role_id":                                "Description.GuestUserRoleId",
	"id":                                                "Description.Id",
	"platform_integration_id":                           "IntegrationID",
	"tenant_id":                                         "Description.TenantID",
	"title":                                             "Description.DisplayName",
}

func GetAdAuthorizationPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdAuthorizationPolicy")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdAuthorizationPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdAuthorizationPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdAuthorizationPolicy =============================

// ==========================  START: AdConditionalAccessPolicy =============================

type AdConditionalAccessPolicy struct {
	ResourceID      string                                       `json:"resource_id"`
	PlatformID      string                                       `json:"platform_id"`
	Description     entraid.AdConditionalAccessPolicyDescription `json:"Description"`
	Metadata        entraid.Metadata                             `json:"metadata"`
	DescribedBy     string                                       `json:"described_by"`
	ResourceType    string                                       `json:"resource_type"`
	IntegrationType string                                       `json:"integration_type"`
	IntegrationID   string                                       `json:"integration_id"`
}

type AdConditionalAccessPolicyHit struct {
	ID      string                    `json:"_id"`
	Score   float64                   `json:"_score"`
	Index   string                    `json:"_index"`
	Type    string                    `json:"_type"`
	Version int64                     `json:"_version,omitempty"`
	Source  AdConditionalAccessPolicy `json:"_source"`
	Sort    []interface{}             `json:"sort"`
}

type AdConditionalAccessPolicyHits struct {
	Total essdk.SearchTotal              `json:"total"`
	Hits  []AdConditionalAccessPolicyHit `json:"hits"`
}

type AdConditionalAccessPolicySearchResponse struct {
	PitID string                        `json:"pit_id"`
	Hits  AdConditionalAccessPolicyHits `json:"hits"`
}

type AdConditionalAccessPolicyPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdConditionalAccessPolicyPaginator(filters []essdk.BoolFilter, limit *int64) (AdConditionalAccessPolicyPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_conditionalaccesspolicy", filters, limit)
	if err != nil {
		return AdConditionalAccessPolicyPaginator{}, err
	}

	p := AdConditionalAccessPolicyPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdConditionalAccessPolicyPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdConditionalAccessPolicyPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdConditionalAccessPolicyPaginator) NextPage(ctx context.Context) ([]AdConditionalAccessPolicy, error) {
	var response AdConditionalAccessPolicySearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdConditionalAccessPolicy
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdConditionalAccessPolicyFilters = map[string]string{
	"application_enforced_restrictions": "Description.ApplicationEnforcedRestrictions",
	"applications":                      "Description.Applications",
	"built_in_controls":                 "Description.BuiltInControls",
	"client_app_types":                  "Description.ClientAppTypes",
	"cloud_app_security":                "Description.CloudAppSecurity",
	"created_date_time":                 "Description.CreatedDateTime",
	"custom_authentication_factors":     "Description.CustomAuthenticationFactors",
	"display_name":                      "Description.DisplayName",
	"id":                                "Description.Id",
	"locations":                         "Description.Locations",
	"modified_date_time":                "Description.ModifiedDateTime",
	"operator":                          "Description.Operator",
	"persistent_browser":                "Description.PersistentBrowser",
	"platform_integration_id":           "IntegrationID",
	"platforms":                         "Description.Platforms",
	"sign_in_frequency":                 "Description.SignInFrequency",
	"sign_in_risk_levels":               "Description.SignInRiskLevels",
	"state":                             "Description.State",
	"tenant_id":                         "Description.TenantID",
	"terms_of_use":                      "Description.TermsOfUse",
	"title":                             "Description.DisplayName",
	"user_risk_levels":                  "Description.UserRiskLevel",
	"users":                             "Description.Users",
}

func ListAdConditionalAccessPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdConditionalAccessPolicy")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdConditionalAccessPolicy NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdConditionalAccessPolicy NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdConditionalAccessPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdConditionalAccessPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdConditionalAccessPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdConditionalAccessPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdConditionalAccessPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdConditionalAccessPolicy NewAdConditionalAccessPolicyPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdConditionalAccessPolicy paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdConditionalAccessPolicyFilters = map[string]string{
	"application_enforced_restrictions": "Description.ApplicationEnforcedRestrictions",
	"applications":                      "Description.Applications",
	"built_in_controls":                 "Description.BuiltInControls",
	"client_app_types":                  "Description.ClientAppTypes",
	"cloud_app_security":                "Description.CloudAppSecurity",
	"created_date_time":                 "Description.CreatedDateTime",
	"custom_authentication_factors":     "Description.CustomAuthenticationFactors",
	"display_name":                      "Description.DisplayName",
	"id":                                "Description.Id",
	"locations":                         "Description.Locations",
	"modified_date_time":                "Description.ModifiedDateTime",
	"operator":                          "Description.Operator",
	"persistent_browser":                "Description.PersistentBrowser",
	"platform_integration_id":           "IntegrationID",
	"platforms":                         "Description.Platforms",
	"sign_in_frequency":                 "Description.SignInFrequency",
	"sign_in_risk_levels":               "Description.SignInRiskLevels",
	"state":                             "Description.State",
	"tenant_id":                         "Description.TenantID",
	"terms_of_use":                      "Description.TermsOfUse",
	"title":                             "Description.DisplayName",
	"user_risk_levels":                  "Description.UserRiskLevel",
	"users":                             "Description.Users",
}

func GetAdConditionalAccessPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdConditionalAccessPolicy")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdConditionalAccessPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdConditionalAccessPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdConditionalAccessPolicy =============================

// ==========================  START: AdAdminConsentRequestPolicy =============================

type AdAdminConsentRequestPolicy struct {
	ResourceID      string                                         `json:"resource_id"`
	PlatformID      string                                         `json:"platform_id"`
	Description     entraid.AdAdminConsentRequestPolicyDescription `json:"Description"`
	Metadata        entraid.Metadata                               `json:"metadata"`
	DescribedBy     string                                         `json:"described_by"`
	ResourceType    string                                         `json:"resource_type"`
	IntegrationType string                                         `json:"integration_type"`
	IntegrationID   string                                         `json:"integration_id"`
}

type AdAdminConsentRequestPolicyHit struct {
	ID      string                      `json:"_id"`
	Score   float64                     `json:"_score"`
	Index   string                      `json:"_index"`
	Type    string                      `json:"_type"`
	Version int64                       `json:"_version,omitempty"`
	Source  AdAdminConsentRequestPolicy `json:"_source"`
	Sort    []interface{}               `json:"sort"`
}

type AdAdminConsentRequestPolicyHits struct {
	Total essdk.SearchTotal                `json:"total"`
	Hits  []AdAdminConsentRequestPolicyHit `json:"hits"`
}

type AdAdminConsentRequestPolicySearchResponse struct {
	PitID string                          `json:"pit_id"`
	Hits  AdAdminConsentRequestPolicyHits `json:"hits"`
}

type AdAdminConsentRequestPolicyPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdAdminConsentRequestPolicyPaginator(filters []essdk.BoolFilter, limit *int64) (AdAdminConsentRequestPolicyPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_adminconsentrequestpolicy", filters, limit)
	if err != nil {
		return AdAdminConsentRequestPolicyPaginator{}, err
	}

	p := AdAdminConsentRequestPolicyPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdAdminConsentRequestPolicyPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdAdminConsentRequestPolicyPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdAdminConsentRequestPolicyPaginator) NextPage(ctx context.Context) ([]AdAdminConsentRequestPolicy, error) {
	var response AdAdminConsentRequestPolicySearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdAdminConsentRequestPolicy
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdAdminConsentRequestPolicyFilters = map[string]string{
	"is_enabled":               "Description.IsEnabled",
	"notify_reviewers":         "Description.NotifyReviewers",
	"platform_integration_id":  "IntegrationID",
	"reminders_enabled":        "Description.RemindersEnabled",
	"request_duration_in_days": "Description.RequestDurationInDays",
	"reviewers":                "Description.Reviewers",
	"tenant_id":                "Description.TenantID",
	"title":                    "Description.Id",
	"version":                  "Description.Version",
}

func ListAdAdminConsentRequestPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdAdminConsentRequestPolicy")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAdminConsentRequestPolicy NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAdminConsentRequestPolicy NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAdminConsentRequestPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAdminConsentRequestPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAdminConsentRequestPolicy GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdAdminConsentRequestPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdAdminConsentRequestPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAdminConsentRequestPolicy NewAdAdminConsentRequestPolicyPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdAdminConsentRequestPolicy paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdAdminConsentRequestPolicyFilters = map[string]string{
	"is_enabled":               "Description.IsEnabled",
	"notify_reviewers":         "Description.NotifyReviewers",
	"platform_integration_id":  "IntegrationID",
	"reminders_enabled":        "Description.RemindersEnabled",
	"request_duration_in_days": "Description.RequestDurationInDays",
	"reviewers":                "Description.Reviewers",
	"tenant_id":                "Description.TenantID",
	"title":                    "Description.Id",
	"version":                  "Description.Version",
}

func GetAdAdminConsentRequestPolicy(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdAdminConsentRequestPolicy")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdAdminConsentRequestPolicyPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdAdminConsentRequestPolicyFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdAdminConsentRequestPolicy =============================

// ==========================  START: AdDevice =============================

type AdDevice struct {
	ResourceID      string                      `json:"resource_id"`
	PlatformID      string                      `json:"platform_id"`
	Description     entraid.AdDeviceDescription `json:"Description"`
	Metadata        entraid.Metadata            `json:"metadata"`
	DescribedBy     string                      `json:"described_by"`
	ResourceType    string                      `json:"resource_type"`
	IntegrationType string                      `json:"integration_type"`
	IntegrationID   string                      `json:"integration_id"`
}

type AdDeviceHit struct {
	ID      string        `json:"_id"`
	Score   float64       `json:"_score"`
	Index   string        `json:"_index"`
	Type    string        `json:"_type"`
	Version int64         `json:"_version,omitempty"`
	Source  AdDevice      `json:"_source"`
	Sort    []interface{} `json:"sort"`
}

type AdDeviceHits struct {
	Total essdk.SearchTotal `json:"total"`
	Hits  []AdDeviceHit     `json:"hits"`
}

type AdDeviceSearchResponse struct {
	PitID string       `json:"pit_id"`
	Hits  AdDeviceHits `json:"hits"`
}

type AdDevicePaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdDevicePaginator(filters []essdk.BoolFilter, limit *int64) (AdDevicePaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_devices", filters, limit)
	if err != nil {
		return AdDevicePaginator{}, err
	}

	p := AdDevicePaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdDevicePaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdDevicePaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdDevicePaginator) NextPage(ctx context.Context) ([]AdDevice, error) {
	var response AdDeviceSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdDevice
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdDeviceFilters = map[string]string{
	"account_enabled":                    "Description.AccountEnabled",
	"approximate_last_sign_in_date_time": "Description.ApproximateLastSignInDateTime",
	"device_id":                          "Description.DeviceId",
	"display_name":                       "Description.DisplayName",
	"extension_attributes":               "Description.ExtensionAttributes",
	"id":                                 "Description.Id",
	"is_compliant":                       "Description.IsCompliant",
	"is_managed":                         "Description.IsManaged",
	"mdm_app_id":                         "Description.MdmAppId",
	"member_of":                          "Description.MemberOf",
	"operating_system":                   "Description.OperatingSystem",
	"operating_system_version":           "Description.OperatingSystemVersion",
	"platform_integration_id":            "IntegrationID",
	"profile_type":                       "Description.ProfileType",
	"tenant_id":                          "Description.TenantID",
	"trust_type":                         "Description.TrustType",
}

func ListAdDevice(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdDevice")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDevice NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDevice NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDevice GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDevice GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDevice GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdDevicePaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdDeviceFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdDevice NewAdDevicePaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdDevice paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdDeviceFilters = map[string]string{
	"account_enabled":                    "Description.AccountEnabled",
	"approximate_last_sign_in_date_time": "Description.ApproximateLastSignInDateTime",
	"device_id":                          "Description.DeviceId",
	"display_name":                       "Description.DisplayName",
	"extension_attributes":               "Description.ExtensionAttributes",
	"id":                                 "Description.Id",
	"is_compliant":                       "Description.IsCompliant",
	"is_managed":                         "Description.IsManaged",
	"mdm_app_id":                         "Description.MdmAppId",
	"member_of":                          "Description.MemberOf",
	"operating_system":                   "Description.OperatingSystem",
	"operating_system_version":           "Description.OperatingSystemVersion",
	"platform_integration_id":            "IntegrationID",
	"profile_type":                       "Description.ProfileType",
	"tenant_id":                          "Description.TenantID",
	"trust_type":                         "Description.TrustType",
}

func GetAdDevice(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdDevice")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdDevicePaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdDeviceFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdDevice =============================

// ==========================  START: AdUserRegistrationDetails =============================

type AdUserRegistrationDetails struct {
	ResourceID      string                                       `json:"resource_id"`
	PlatformID      string                                       `json:"platform_id"`
	Description     entraid.AdUserRegistrationDetailsDescription `json:"Description"`
	Metadata        entraid.Metadata                             `json:"metadata"`
	DescribedBy     string                                       `json:"described_by"`
	ResourceType    string                                       `json:"resource_type"`
	IntegrationType string                                       `json:"integration_type"`
	IntegrationID   string                                       `json:"integration_id"`
}

type AdUserRegistrationDetailsHit struct {
	ID      string                    `json:"_id"`
	Score   float64                   `json:"_score"`
	Index   string                    `json:"_index"`
	Type    string                    `json:"_type"`
	Version int64                     `json:"_version,omitempty"`
	Source  AdUserRegistrationDetails `json:"_source"`
	Sort    []interface{}             `json:"sort"`
}

type AdUserRegistrationDetailsHits struct {
	Total essdk.SearchTotal              `json:"total"`
	Hits  []AdUserRegistrationDetailsHit `json:"hits"`
}

type AdUserRegistrationDetailsSearchResponse struct {
	PitID string                        `json:"pit_id"`
	Hits  AdUserRegistrationDetailsHits `json:"hits"`
}

type AdUserRegistrationDetailsPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdUserRegistrationDetailsPaginator(filters []essdk.BoolFilter, limit *int64) (AdUserRegistrationDetailsPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_userregistrationdetails", filters, limit)
	if err != nil {
		return AdUserRegistrationDetailsPaginator{}, err
	}

	p := AdUserRegistrationDetailsPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdUserRegistrationDetailsPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdUserRegistrationDetailsPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdUserRegistrationDetailsPaginator) NextPage(ctx context.Context) ([]AdUserRegistrationDetails, error) {
	var response AdUserRegistrationDetailsSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdUserRegistrationDetails
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdUserRegistrationDetailsFilters = map[string]string{
	"id":                      "Description.Id",
	"is_admin":                "Description.IsAdmin",
	"is_mfa_capable":          "Description.IsMfaCapable",
	"is_mfa_registered":       "Description.IsMfaRegistered",
	"is_passwordless_capable": "Description.IsPasswordlessCapable",
	"is_sspr_capable":         "Description.IsSsprCapable",
	"is_sspr_enabled":         "Description.IsSsprEnabled",
	"is_sspr_registered":      "Description.IsSsprRegistered",
	"is_system_preferred_authentication_method_enabled": "Description.IsSystemPreferredAuthenticationMethodEnabled",
	"last_updated_date_time":                            "Description.LastUpdatedDateTime",
	"methods_registered":                                "Description.MethodsRegistered",
	"platform_integration_id":                           "IntegrationID",
	"system_preferred_authentication_methods":           "Description.SystemPreferredAuthenticationMethods",
	"tenant_id":         "Description.TenantID",
	"title":             "Description.Id",
	"user_display_name": "Description.UserDisplayName",
	"user_preferred_method_for_secondary_authentication": "Description.UserPreferredMethodForSecondaryAuthentication",
	"user_principal_name":                                "Description.UserPrincipalName",
	"user_type":                                          "Description.UserType",
}

func ListAdUserRegistrationDetails(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdUserRegistrationDetails")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUserRegistrationDetails NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUserRegistrationDetails NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUserRegistrationDetails GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUserRegistrationDetails GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUserRegistrationDetails GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdUserRegistrationDetailsPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdUserRegistrationDetailsFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdUserRegistrationDetails NewAdUserRegistrationDetailsPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdUserRegistrationDetails paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdUserRegistrationDetailsFilters = map[string]string{
	"id":                      "Description.Id",
	"is_admin":                "Description.IsAdmin",
	"is_mfa_capable":          "Description.IsMfaCapable",
	"is_mfa_registered":       "Description.IsMfaRegistered",
	"is_passwordless_capable": "Description.IsPasswordlessCapable",
	"is_sspr_capable":         "Description.IsSsprCapable",
	"is_sspr_enabled":         "Description.IsSsprEnabled",
	"is_sspr_registered":      "Description.IsSsprRegistered",
	"is_system_preferred_authentication_method_enabled": "Description.IsSystemPreferredAuthenticationMethodEnabled",
	"last_updated_date_time":                            "Description.LastUpdatedDateTime",
	"methods_registered":                                "Description.MethodsRegistered",
	"platform_integration_id":                           "IntegrationID",
	"system_preferred_authentication_methods":           "Description.SystemPreferredAuthenticationMethods",
	"tenant_id":         "Description.TenantID",
	"title":             "Description.Id",
	"user_display_name": "Description.UserDisplayName",
	"user_preferred_method_for_secondary_authentication": "Description.UserPreferredMethodForSecondaryAuthentication",
	"user_principal_name":                                "Description.UserPrincipalName",
	"user_type":                                          "Description.UserType",
}

func GetAdUserRegistrationDetails(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdUserRegistrationDetails")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdUserRegistrationDetailsPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdUserRegistrationDetailsFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdUserRegistrationDetails =============================

// ==========================  START: AdGroupMembership =============================

type AdGroupMembership struct {
	ResourceID      string                               `json:"resource_id"`
	PlatformID      string                               `json:"platform_id"`
	Description     entraid.AdGroupMembershipDescription `json:"Description"`
	Metadata        entraid.Metadata                     `json:"metadata"`
	DescribedBy     string                               `json:"described_by"`
	ResourceType    string                               `json:"resource_type"`
	IntegrationType string                               `json:"integration_type"`
	IntegrationID   string                               `json:"integration_id"`
}

type AdGroupMembershipHit struct {
	ID      string            `json:"_id"`
	Score   float64           `json:"_score"`
	Index   string            `json:"_index"`
	Type    string            `json:"_type"`
	Version int64             `json:"_version,omitempty"`
	Source  AdGroupMembership `json:"_source"`
	Sort    []interface{}     `json:"sort"`
}

type AdGroupMembershipHits struct {
	Total essdk.SearchTotal      `json:"total"`
	Hits  []AdGroupMembershipHit `json:"hits"`
}

type AdGroupMembershipSearchResponse struct {
	PitID string                `json:"pit_id"`
	Hits  AdGroupMembershipHits `json:"hits"`
}

type AdGroupMembershipPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdGroupMembershipPaginator(filters []essdk.BoolFilter, limit *int64) (AdGroupMembershipPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_groupmemberships", filters, limit)
	if err != nil {
		return AdGroupMembershipPaginator{}, err
	}

	p := AdGroupMembershipPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdGroupMembershipPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdGroupMembershipPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdGroupMembershipPaginator) NextPage(ctx context.Context) ([]AdGroupMembership, error) {
	var response AdGroupMembershipSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdGroupMembership
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdGroupMembershipFilters = map[string]string{
	"account_enabled":         "Description.AccountEnabled",
	"display_name":            "Description.DisplayName",
	"group_id":                "Description.GroupId",
	"id":                      "Description.Id",
	"mail":                    "Description.Mail",
	"platform_account_id":     "Metadata.SourceID",
	"platform_integration_id": "IntegrationID",
	"platform_resource_id":    "ID",
	"proxy_addresses":         "Description.ProxyAddresses",
	"security_identifier":     "Description.SecurityIdentifier",
	"state":                   "Description.State",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.DisplayName",
	"user_principal_name":     "Description.UserPrincipalName",
	"user_type":               "Description.UserType",
}

func ListAdGroupMembership(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdGroupMembership")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroupMembership NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroupMembership NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroupMembership GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroupMembership GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroupMembership GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdGroupMembershipPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdGroupMembershipFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdGroupMembership NewAdGroupMembershipPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdGroupMembership paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdGroupMembershipFilters = map[string]string{
	"account_enabled":         "Description.AccountEnabled",
	"display_name":            "Description.DisplayName",
	"group_id":                "Description.GroupId",
	"id":                      "Description.Id",
	"mail":                    "Description.Mail",
	"platform_account_id":     "Metadata.SourceID",
	"platform_integration_id": "IntegrationID",
	"platform_resource_id":    "ID",
	"proxy_addresses":         "Description.ProxyAddresses",
	"security_identifier":     "Description.SecurityIdentifier",
	"state":                   "Description.State",
	"tenant_id":               "Description.TenantID",
	"title":                   "Description.DisplayName",
	"user_principal_name":     "Description.UserPrincipalName",
	"user_type":               "Description.UserType",
}

func GetAdGroupMembership(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdGroupMembership")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdGroupMembershipPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdGroupMembershipFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdGroupMembership =============================

// ==========================  START: AdAppRegistration =============================

type AdAppRegistration struct {
	ResourceID      string                               `json:"resource_id"`
	PlatformID      string                               `json:"platform_id"`
	Description     entraid.AdAppRegistrationDescription `json:"Description"`
	Metadata        entraid.Metadata                     `json:"metadata"`
	DescribedBy     string                               `json:"described_by"`
	ResourceType    string                               `json:"resource_type"`
	IntegrationType string                               `json:"integration_type"`
	IntegrationID   string                               `json:"integration_id"`
}

type AdAppRegistrationHit struct {
	ID      string            `json:"_id"`
	Score   float64           `json:"_score"`
	Index   string            `json:"_index"`
	Type    string            `json:"_type"`
	Version int64             `json:"_version,omitempty"`
	Source  AdAppRegistration `json:"_source"`
	Sort    []interface{}     `json:"sort"`
}

type AdAppRegistrationHits struct {
	Total essdk.SearchTotal      `json:"total"`
	Hits  []AdAppRegistrationHit `json:"hits"`
}

type AdAppRegistrationSearchResponse struct {
	PitID string                `json:"pit_id"`
	Hits  AdAppRegistrationHits `json:"hits"`
}

type AdAppRegistrationPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdAppRegistrationPaginator(filters []essdk.BoolFilter, limit *int64) (AdAppRegistrationPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_appregistrations", filters, limit)
	if err != nil {
		return AdAppRegistrationPaginator{}, err
	}

	p := AdAppRegistrationPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdAppRegistrationPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdAppRegistrationPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdAppRegistrationPaginator) NextPage(ctx context.Context) ([]AdAppRegistration, error) {
	var response AdAppRegistrationSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdAppRegistration
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdAppRegistrationFilters = map[string]string{
	"api":                          "Description.Api",
	"app_id":                       "Description.AppId",
	"created_date_time":            "Description.CreatedDateTime",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"identifier_uris":              "Description.IdentifierUris",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"oauth2_require_post_response": "Description.Oauth2RequirePostResponse",
	"owner_ids":                    "Description.OwnerIds",
	"parental_control_settings":    "Description.ParentalControlSettings",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_integration_id":      "IntegrationID",
	"publisher_domain":             "Description.PublisherDomain",
	"sign_in_audience":             "Description.SignInAudience",
	"spa":                          "Description.Spa",
	"tags_src":                     "Description.TagsSrc",
	"tenant_id":                    "Description.TenantID",
	"web":                          "Description.Web",
}

func ListAdAppRegistration(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdAppRegistration")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAppRegistration NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAppRegistration NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAppRegistration GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAppRegistration GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAppRegistration GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdAppRegistrationPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdAppRegistrationFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdAppRegistration NewAdAppRegistrationPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdAppRegistration paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdAppRegistrationFilters = map[string]string{
	"api":                          "Description.Api",
	"app_id":                       "Description.AppId",
	"created_date_time":            "Description.CreatedDateTime",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"identifier_uris":              "Description.IdentifierUris",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"oauth2_require_post_response": "Description.Oauth2RequirePostResponse",
	"owner_ids":                    "Description.OwnerIds",
	"parental_control_settings":    "Description.ParentalControlSettings",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_integration_id":      "IntegrationID",
	"publisher_domain":             "Description.PublisherDomain",
	"sign_in_audience":             "Description.SignInAudience",
	"spa":                          "Description.Spa",
	"tags_src":                     "Description.TagsSrc",
	"tenant_id":                    "Description.TenantID",
	"web":                          "Description.Web",
}

func GetAdAppRegistration(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdAppRegistration")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdAppRegistrationPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdAppRegistrationFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdAppRegistration =============================

// ==========================  START: AdEnterpriseApplication =============================

type AdEnterpriseApplication struct {
	ResourceID      string                                     `json:"resource_id"`
	PlatformID      string                                     `json:"platform_id"`
	Description     entraid.AdEnterpriseApplicationDescription `json:"Description"`
	Metadata        entraid.Metadata                           `json:"metadata"`
	DescribedBy     string                                     `json:"described_by"`
	ResourceType    string                                     `json:"resource_type"`
	IntegrationType string                                     `json:"integration_type"`
	IntegrationID   string                                     `json:"integration_id"`
}

type AdEnterpriseApplicationHit struct {
	ID      string                  `json:"_id"`
	Score   float64                 `json:"_score"`
	Index   string                  `json:"_index"`
	Type    string                  `json:"_type"`
	Version int64                   `json:"_version,omitempty"`
	Source  AdEnterpriseApplication `json:"_source"`
	Sort    []interface{}           `json:"sort"`
}

type AdEnterpriseApplicationHits struct {
	Total essdk.SearchTotal            `json:"total"`
	Hits  []AdEnterpriseApplicationHit `json:"hits"`
}

type AdEnterpriseApplicationSearchResponse struct {
	PitID string                      `json:"pit_id"`
	Hits  AdEnterpriseApplicationHits `json:"hits"`
}

type AdEnterpriseApplicationPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdEnterpriseApplicationPaginator(filters []essdk.BoolFilter, limit *int64) (AdEnterpriseApplicationPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_enterpriseapplication", filters, limit)
	if err != nil {
		return AdEnterpriseApplicationPaginator{}, err
	}

	p := AdEnterpriseApplicationPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdEnterpriseApplicationPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdEnterpriseApplicationPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdEnterpriseApplicationPaginator) NextPage(ctx context.Context) ([]AdEnterpriseApplication, error) {
	var response AdEnterpriseApplicationSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdEnterpriseApplication
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdEnterpriseApplicationFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"service_principal_type":       "Description.ServicePrincipalType",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func ListAdEnterpriseApplication(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdEnterpriseApplication")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdEnterpriseApplication NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdEnterpriseApplication NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdEnterpriseApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdEnterpriseApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdEnterpriseApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdEnterpriseApplicationPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdEnterpriseApplicationFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdEnterpriseApplication NewAdEnterpriseApplicationPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdEnterpriseApplication paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdEnterpriseApplicationFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"service_principal_type":       "Description.ServicePrincipalType",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func GetAdEnterpriseApplication(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdEnterpriseApplication")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdEnterpriseApplicationPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdEnterpriseApplicationFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdEnterpriseApplication =============================

// ==========================  START: AdManagedIdentity =============================

type AdManagedIdentity struct {
	ResourceID      string                               `json:"resource_id"`
	PlatformID      string                               `json:"platform_id"`
	Description     entraid.AdManagedIdentityDescription `json:"Description"`
	Metadata        entraid.Metadata                     `json:"metadata"`
	DescribedBy     string                               `json:"described_by"`
	ResourceType    string                               `json:"resource_type"`
	IntegrationType string                               `json:"integration_type"`
	IntegrationID   string                               `json:"integration_id"`
}

type AdManagedIdentityHit struct {
	ID      string            `json:"_id"`
	Score   float64           `json:"_score"`
	Index   string            `json:"_index"`
	Type    string            `json:"_type"`
	Version int64             `json:"_version,omitempty"`
	Source  AdManagedIdentity `json:"_source"`
	Sort    []interface{}     `json:"sort"`
}

type AdManagedIdentityHits struct {
	Total essdk.SearchTotal      `json:"total"`
	Hits  []AdManagedIdentityHit `json:"hits"`
}

type AdManagedIdentitySearchResponse struct {
	PitID string                `json:"pit_id"`
	Hits  AdManagedIdentityHits `json:"hits"`
}

type AdManagedIdentityPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdManagedIdentityPaginator(filters []essdk.BoolFilter, limit *int64) (AdManagedIdentityPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_managedidentity", filters, limit)
	if err != nil {
		return AdManagedIdentityPaginator{}, err
	}

	p := AdManagedIdentityPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdManagedIdentityPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdManagedIdentityPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdManagedIdentityPaginator) NextPage(ctx context.Context) ([]AdManagedIdentity, error) {
	var response AdManagedIdentitySearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdManagedIdentity
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdManagedIdentityFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"identity_type":                "Description.IdentityType",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func ListAdManagedIdentity(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdManagedIdentity")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdManagedIdentity NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdManagedIdentity NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdManagedIdentity GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdManagedIdentity GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdManagedIdentity GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdManagedIdentityPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdManagedIdentityFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdManagedIdentity NewAdManagedIdentityPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdManagedIdentity paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdManagedIdentityFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"identity_type":                "Description.IdentityType",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func GetAdManagedIdentity(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdManagedIdentity")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdManagedIdentityPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdManagedIdentityFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdManagedIdentity =============================

// ==========================  START: AdMicrosoftApplication =============================

type AdMicrosoftApplication struct {
	ResourceID      string                                    `json:"resource_id"`
	PlatformID      string                                    `json:"platform_id"`
	Description     entraid.AdMicrosoftApplicationDescription `json:"Description"`
	Metadata        entraid.Metadata                          `json:"metadata"`
	DescribedBy     string                                    `json:"described_by"`
	ResourceType    string                                    `json:"resource_type"`
	IntegrationType string                                    `json:"integration_type"`
	IntegrationID   string                                    `json:"integration_id"`
}

type AdMicrosoftApplicationHit struct {
	ID      string                 `json:"_id"`
	Score   float64                `json:"_score"`
	Index   string                 `json:"_index"`
	Type    string                 `json:"_type"`
	Version int64                  `json:"_version,omitempty"`
	Source  AdMicrosoftApplication `json:"_source"`
	Sort    []interface{}          `json:"sort"`
}

type AdMicrosoftApplicationHits struct {
	Total essdk.SearchTotal           `json:"total"`
	Hits  []AdMicrosoftApplicationHit `json:"hits"`
}

type AdMicrosoftApplicationSearchResponse struct {
	PitID string                     `json:"pit_id"`
	Hits  AdMicrosoftApplicationHits `json:"hits"`
}

type AdMicrosoftApplicationPaginator struct {
	paginator *essdk.BaseESPaginator
}

func (k Client) NewAdMicrosoftApplicationPaginator(filters []essdk.BoolFilter, limit *int64) (AdMicrosoftApplicationPaginator, error) {
	paginator, err := essdk.NewPaginator(k.ES(), "microsoft_entra_microsoftapplication", filters, limit)
	if err != nil {
		return AdMicrosoftApplicationPaginator{}, err
	}

	p := AdMicrosoftApplicationPaginator{
		paginator: paginator,
	}

	return p, nil
}

func (p AdMicrosoftApplicationPaginator) HasNext() bool {
	return !p.paginator.Done()
}

func (p AdMicrosoftApplicationPaginator) Close(ctx context.Context) error {
	return p.paginator.Deallocate(ctx)
}

func (p AdMicrosoftApplicationPaginator) NextPage(ctx context.Context) ([]AdMicrosoftApplication, error) {
	var response AdMicrosoftApplicationSearchResponse
	err := p.paginator.Search(ctx, &response)
	if err != nil {
		return nil, err
	}

	var values []AdMicrosoftApplication
	for _, hit := range response.Hits.Hits {
		values = append(values, hit.Source)
	}

	hits := int64(len(response.Hits.Hits))
	if hits > 0 {
		p.paginator.UpdateState(hits, response.Hits.Hits[hits-1].Sort, response.PitID)
	} else {
		p.paginator.UpdateState(hits, nil, "")
	}

	return values, nil
}

var listAdMicrosoftApplicationFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"service_principal_type":       "Description.ServicePrincipalType",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func ListAdMicrosoftApplication(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("ListAdMicrosoftApplication")
	runtime.GC()

	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdMicrosoftApplication NewClientCached", "error", err)
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdMicrosoftApplication NewSelfClientCached", "error", err)
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdMicrosoftApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyIntegrationID", "error", err)
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdMicrosoftApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyResourceCollectionFilters", "error", err)
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdMicrosoftApplication GetConfigTableValueOrNil for OpenGovernanceConfigKeyClientType", "error", err)
		return nil, err
	}

	paginator, err := k.NewAdMicrosoftApplicationPaginator(essdk.BuildFilter(ctx, d.QueryContext, listAdMicrosoftApplicationFilters, integrationId, encodedResourceCollectionFilters, clientType), d.QueryContext.Limit)
	if err != nil {
		plugin.Logger(ctx).Error("ListAdMicrosoftApplication NewAdMicrosoftApplicationPaginator", "error", err)
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			plugin.Logger(ctx).Error("ListAdMicrosoftApplication paginator.NextPage", "error", err)
			return nil, err
		}

		for _, v := range page {
			d.StreamListItem(ctx, v)
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

var getAdMicrosoftApplicationFilters = map[string]string{
	"account_enabled":              "Description.AccountEnabled",
	"add_ins":                      "Description.AddIns",
	"alternative_names":            "Description.AlternativeNames",
	"app_description":              "Description.AppDescription",
	"app_display_name":             "Description.AppDisplayName",
	"app_id":                       "Description.AppId",
	"app_owner_organization_id":    "Description.AppOwnerOrganizationId",
	"app_role_assignment_required": "Description.AppRoleAssignmentRequired",
	"app_roles":                    "Description.AppRoles",
	"description":                  "Description.Description",
	"display_name":                 "Description.DisplayName",
	"id":                           "Description.Id",
	"info":                         "Description.Info",
	"key_credentials":              "Description.KeyCredentials",
	"login_url":                    "Description.LoginUrl",
	"logout_url":                   "Description.LogoutUrl",
	"notification_email_addresses": "Description.NotificationEmailAddresses",
	"oauth2_permission_scopes":     "Description.PublishedPermissionScopes",
	"owner_ids":                    "Description.Owners",
	"password_credentials":         "Description.PasswordCredentials",
	"platform_account_id":          "Metadata.SourceID",
	"platform_integration_id":      "IntegrationID",
	"platform_resource_id":         "ID",
	"reply_urls":                   "Description.ReplyUrls",
	"service_principal_names":      "Description.ServicePrincipalNames",
	"service_principal_type":       "Description.ServicePrincipalType",
	"sign_in_audience":             "Description.SignInAudience",
	"tags_src":                     "Description.Tags",
	"tenant_id":                    "Description.TenantID",
}

func GetAdMicrosoftApplication(ctx context.Context, d *plugin.QueryData, _ *plugin.HydrateData) (interface{}, error) {
	plugin.Logger(ctx).Trace("GetAdMicrosoftApplication")
	runtime.GC()
	// create service
	cfg := essdk.GetConfig(d.Connection)
	ke, err := essdk.NewClientCached(cfg, d.ConnectionCache, ctx)
	if err != nil {
		return nil, err
	}
	k := Client{Client: ke}

	sc, err := steampipesdk.NewSelfClientCached(ctx, d.ConnectionCache)
	if err != nil {
		return nil, err
	}
	integrationId, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyIntegrationID)
	if err != nil {
		return nil, err
	}
	encodedResourceCollectionFilters, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyResourceCollectionFilters)
	if err != nil {
		return nil, err
	}
	clientType, err := sc.GetConfigTableValueOrNil(ctx, steampipesdk.OpenGovernanceConfigKeyClientType)
	if err != nil {
		return nil, err
	}

	limit := int64(1)
	paginator, err := k.NewAdMicrosoftApplicationPaginator(essdk.BuildFilter(ctx, d.QueryContext, getAdMicrosoftApplicationFilters, integrationId, encodedResourceCollectionFilters, clientType), &limit)
	if err != nil {
		return nil, err
	}

	for paginator.HasNext() {
		page, err := paginator.NextPage(ctx)
		if err != nil {
			return nil, err
		}

		for _, v := range page {
			return v, nil
		}
	}

	err = paginator.Close(ctx)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// ==========================  END: AdMicrosoftApplication =============================
